
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

基于聚类推荐的Ad Hoc网络缓存机制

背景介绍

我们生活在一个在线视频疯涨的时代．主流的视频网站(如YouTube, Hulu, Youku)以及社交
网站(如FaceBook, Twitter, Weibo)迅速地占据了互联网流量的大部分．每天，在很短的时间
内都会有不计其数的新视频流入互联网．据悉，在线视频已经占领了世界互联网流量将近一
半的份额(42%的流量来自流媒体播放)．世界最大的播放平台,YouTube，就已经消耗掉流媒体
流量中57%的流量，这也就是说，单独YouTube一个视频应用就包揽了全球带宽的24%.

面对大量的视频流量，运营商想出各种办法来控制，其中最重要的方法就是缓存．规模大的
内容提供商会在物理上的各个区域提供对应数量的缓存服务器，当来自各个区域的请求涌入
服务器时，服务器会指导各个客户端向各个区域的缓存服务器索取内容．这么做能够极大的
减少网络流量在骨干网络的拥塞，同时降低海量请求对中心服务器造成的压力．

通常运营商会根据历史请求的多少来选择是否缓存某个内容，如果某个视频是在某个区域内
有大量增长的趋势，那么它就会被缓存．这涉及流量统计以及缓存替换策略的设计．然而，
这种传统的做法需要在大量的请求出现之后才能制定相应的对策．如今的流媒体环境的更新
速度已经极大的加快了，通常视频流行的周期快的能够在２天的时间之内结束，这些周期的
特点是不可预测且短暂．基于统计数据的缓存策略在快速的社交媒体消费环境下容易散失其
优势：在大量统计之后得出结论却发现请求已经不再产生．

应对这个问题的一种方法是主动缓存策略，它不依靠大量的历史请求来决定是否缓存一个内容．
与此相反，在一个内容在某个区域中流行起来之前，就决定是否缓存一个内容，这样做能够
很好应对未来将要产生的爆发式请求．但是，要使主动缓存达到效果，就必须能够预测某个
视频在未来的流行程度，这一点涉及视频属性的分析和对产生请求的用户属性的分析．

随着移动设备的普及，人们开始习惯在手持移动设备上完成各类流媒体消费．在中国，3G与4G
信号的全面广泛覆盖让人们每时每刻都能享受到互联网带来的便捷．但是，不同于有线网络通信
的是，无线网络是一个开放式的媒介传输，当一个用户发送或者接受数据的同时，周围的物理
媒介就会被占用，同样物理范围内的用户就必须等待其完成传输，否则就会造成信号的冲突．
这就相当于一个物理区域内的用户同属于一个总线网络，越多的请求就会造成越严重的阻塞与
冲突．

另外，无线网络自身存在一个通行能力的上限．因此，想通过增加通信能力来减少冲突的做法
不太可行．在人员密集的场合，如体育场，大型游乐园，城市商业街区等地会有大量用户同时
争用一个信道，传统的基站通信在这种环境下的通信能力有限．于是，人们提出在传统的基站
式的通信方式上增加设备之间的通信方式．这种通信方式形成的网络称为移动自主网络．

移动自主网通过蓝牙或者WiFi信号进行设备之间的通信，原本在基站和终端设备之间传输的
数据通过移动自主网可以在设备与设备之间传输，典型的应用场景就是流媒体播放．通过
构建移动自主网，用户发出的流媒体请求能够被导向到网络中存在该资源的设备上，通过
移动自主网来进行视频的传播．通过控制设备发送信号功率等方法，设备之间传输所占用的
信道的物理范围远远小于基站的覆盖范围，进而极大的提高该区域内无线网络的整体吞吐量．

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

Ad Hoc 网中的视频传输

虽然设备之间传输的模式能够减少干扰范围，但是其仍旧属于开放媒介传输方式，设备之间
还是会存在相互干扰的情况出现．尤其对于流媒体这样的应用，信道的争用问题依然很严重．
假设在一个自主网络中，每个用户都持续性的发出流媒体视频请求，那么信道就会始终处于
被占用的状态．激烈的竞争导致冲突频繁出现，最终每个用户都得不到预期的带宽，视频质量
进而下降．

可以看到，在无线网络中，保证通信顺畅的有效途径是减少信道的争用，尽量避免冲突的产生．
结合到视频传输的具体应用场景中，那就是尽量减少用户传输视频所造成的信道占用．在满足
相同数量请求的情况下，达到这一效果唯一做法就是广播与缓存．

广播是一种有效利用信道的方式．无线网络中，无论是广播还是单播，都会占用信道．如果
能够利用广播覆盖更多的目标，就能够减少许多冗余的数据传输．缓存最初的目标在于通过
减少播放延时和播放卡顿现象提升用户体验.在自主网环境中，设备可以通过监听信道中传输
的数据，缓存自己认为需要的内容，进而达到降低传输开销的目的．

在本章，我们提出基于推荐的缓存机制．其中的考虑在于用户可以监听到自主网络中的数据，
但是网络中的数据量庞大，而设备本身包含的存储空间无法容纳所有的数据，因此在缓存过程
就要有所取舍,如何取舍就是推荐的任务．与传统的缓存任务不同的是，我们缓存下的内容有
极高的可能性不会被利用到，这个概率要取决于推荐的准确度．但是，相比于网络信道资源
和用户的播放体验，我们认为设备的存储空间是廉价许多的资源，使用部分的存储空间换取
网络信道资源和播放体验的提升是值得考虑的．

假设在一个100个用户的自主网络中，每个用户都在持续的发出视频请求，网络中存在500个
视频资源，设备的缓存空间足够存储将近30个视频．由于用户发出的视频请求并非同步的，
因此在不同的时刻，会有不同的用户向同一个视频发出请求，那么该视频在网络中传输次数
就达到了10次．如果能够在第一次传输该视频的时候，将这个视频事先缓存到其他9个设备
的缓存中，那么，网络就可以减少9次的视频传播，同时也能提升另外9个用户的体验．这样
做是一种变相的同步机制，使得用户的请求能够在一次的广播中得到满足．

为了预测用户将来会播放哪些视频，可以借鉴推荐技术．推荐技术通过历史数据以及用户视频
属性来对用户的偏好进行预测，从而保证被推荐的视频在将来以一定的概率被观看．缓存策略
成功的关键是推荐的命中率的提高．传统的协同过滤方法在数据稀疏的时候表现不佳，因此，
本章我们使用我们的基于聚类的推荐框架来实现缓存任务．具体而言，系统通过给各个节点
提供推荐，进而告知移动设备未来应该缓存哪些视频．之后，系统通过广播被推荐的视频给
设备提供视频传输，这些视频通过一次的广播传播到达各个目标设备缓存中．这些目标设备
中的任意两个观看了该视频，就达到了节省传输带宽的目的．但是现实情况是，大部分的用户
观看的内容呈现zipf分布，即80%以上观看的视频集中在20%以下的视频内容,少部分的内容会
被大量的用户消费．因此，我们期望一次的传输能够被大量(而非2个)的用户观看,进而使得
大量的传输带宽被节省．

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

系统设计

推荐算法分为离线算法与在线算法，在实际系统中，在线算法比较实用．原来的聚类推荐算法
是在离线情况下训练完成，欲将其改为在线算法，必须重新考虑更新策略．

原来的更新过程是，实验平台提供一系列数据，优化算法遍历数据集中的每条数据，完成更新
步骤．为了使得模型达到收敛状态，更新过程不断循环进行．为了搭建一个推荐框架，系统中
存在两类实体，客户端和服务器．客户端负责提出推荐请求，将自己的使用数据发送到服务器，
同时完成实际的缓存工作(监听网络中的视频内容，选择被推荐的视频内容进入缓存)；服务器
端完成实际的推荐工作，具体而言，它负责记录客户端的使用记录，定期的进行模型的更新,
当用户发送推荐请求之后发送推荐列表，另外，为了使广播达到带宽节省的效果，服务器还
负责对推荐视频进行传输上的同步,即让其在一次的广播中完成传输．

图XXX是系统的架构图，它包括交互接口模块，数据缓存队列，模型更新模块以及推荐模块．
交互接口模块负责将用户行为日志转换成偏序记录和聚类记录分别存入偏序缓存队列和聚类
缓存队列，同时将原始的历史记录存入数据库；

数据缓存队列分为偏序队列和聚类队列，因
为是先进先出数据结构，它保证了队列中始终维持着最新的用户历史记录．队列的容量需要
被谨慎的选择，当系统中用户数量增加或者视频数量增加，都要求容量对应的扩展，因此系统
会记录下当前系统的用户和视频数量，队列的大小作出对应的动态调整．同时，队列中的内容
也需要被监控，用户时常会在一段时间内迅速发出大量请求，这样队列中的数据将充斥着这群
用户的数据，更新出的模型会向这群用户偏袒．为了使得不同用户得到平等地更新，必须控制
每个用户的数据在队列中的数量，同时跟踪每个用户的记录在队列中的位置，超过阈值的用户
的数据将优先被请出队列．

模型更新模块也分为偏序信号更新模块和聚类信号更新模块，一次更新迭代需要对每一个训
练数据完成一次更新，为了使模型更新完成，通常需要多轮的更新迭代．这也是我们需要
维护一个数据队列缓存在内存中的原因，数据通常需要被访问多次之后才能充分挖掘出其中的
信息，将数据保存在内存队列中，保证了其在队列中的时间内被充分的更新．但是，当数据
更新频繁，数据很快就会被请出队列，但是这正是我们所期望的，这保证了：当请求频繁的
时候，我们针对最新的请求进行更新，当请求速度缓慢之后，我们能够有足够的请求用来更新
模型(即一个数据被多次迭代更新).另外一个关键点是模型更新的频率，由于采用随机梯度下降
进行更新，一次迭代需要的时间很短，模型更新频率要视请求到来的速度决定，当请求多的时候，
模型更新频率要相应提高，请求速度平静之后，频率可适当下降．

推荐模块针对每个人的特征向量，给每个视频计算一个偏好值，根据偏好值排序推荐前N个视频．
实际实现出可使用一个固定大小的优先队列快速获取前N个视频．为了保证数据传输的同步性，
推荐模块被周期运行，因此每个优先队列也周期性地被更新．如果进一步考虑视频的时效性，
即给新视频更高的权重，那么在计算权重时候可适当提高新视频的权值而非降低老视频的权值．
在每一个周期里，推荐模块向各个客户端发布推荐列表，受到多数确认之后知道视频服务器
对所有被推荐视频进行广播发送，各个移动设备根据自己的推荐列表进行接收．

客户端模块的行为很简单，只要及时将观看数据发送到服务器，同时接收推荐列表以及根据
推荐列表监听缓存对应的广播数据．一个历史数据的生命周期如下：首先由客户端产生，而后
被传输到服务器接口，一份保存于数据库中，另外一份转换成偏序信号和聚类信号，在对应
的队列中被更新模块中多次更新之后被请出队列，进而结束其生命周期．

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

模拟实验

移动网络日益普及的今天，人们开始像使用台式设备一般使用移动设备；同样的，人们开始
像使用有限网络那样开始使用无线网络，无线网络带来的便捷性却是有线网络所不能比拟的．
即时聊天，收发邮件，浏览网页甚至是观看视频，很多曾经仅在台式设备上出现的应用现在
已经普及移动应用市场，在不久的将来，视频流将称为移动通信的主要瓶颈．

之前提到无线通行存在固有的通信瓶颈，提高无线网络吞吐量的有效途径是建立设备间的无线
通信．然而，无线通信要保证信道足够顺畅以尽量避免冲突产生，为此广播通信成为大范围
内容传播的首选．

实验场景设定

为了验证推荐预取带来的实际效果，我们进行了模拟实验．实验场景假设用户数量固定且视频
数量固定，这些用户在区域内组成无线自主网，同时每个用户都在4G基站的覆盖范围内．用户
根据自己的情况不断发出视频请求(不同用户发送请求的频率可能不同)，请求发出后，无线
自组网的资源定位模块定位相应的资源，引导该节点向请求节点发送视频，视频在网络中传播
的同时能够被其他节点监听，它们有机会将其缓存到自己的设备上．

通常，无线自组网络中的节点发送请求的方式的任意的．例如，节点１发送视频Ａ的请求，过
了一段时间后，节点２同样发送了视频Ａ的请求．如此，视频Ａ就在网络中传播了２次，对于
热门视频，由于请求的不同步，视频会被重复多次在网络中传播．为了减少视频Ａ在网络中的
传播，一种方法就是采取缓存策略．当节点２监听到视频Ａ的传输时，将其缓存．但是，节点
２能够监听到网络各种视频内容，数量远超过它的缓存空间大小．因此节点２必须决定缓存
哪些视频，具体而言，当视频Ａ来到的时候，它不知道将来视频Ａ是否有用．为了判断视频Ａ
对节点２的价值，我们使用推荐技术来给视频Ａ作出评价．具体而言，在所有现有缓存中，
利用推荐技术淘汰掉价值最低的视频，将Ａ缓存下来，如果Ａ的价值最低，直接忽略Ａ．

本实验通过测量用户接受缓存内容与实际请求所占的比例，来计算推荐缓存为网络减少了多少
视频流量．例如，我们假设每个用户未来都还要观看5个视频，我们通过推荐缓存，为每个用户
缓存25个视频，如果一个用户观看了缓存中的其中一个视频，那么认为原本需要网络传输的
一个视频由缓存代替，由此节省了一个视频的传输．这里作出的权衡是：网络带宽和缓存空间的
取舍．在上面的例子中，我们认为一个视频的传输的代价要高于５个视频的缓存，５个视频的
缓存减少了一个视频的传输和观看实验以及各种视频卡顿现象，在存储设备日益廉价的今天，
这种取舍还是合理的．

实验数据

这里使用的数据仍然是Youku的数据，数据集中提取最密集的一部分用户和相应的视频．虽然
数据中每个用户的请求时间不同且间隙不同，我们假设这些请求都集中在实验假设的时间段内，
并且每个用户的请求进度相同(即相同时间请求视频所占自己所有请求的百分比相同)，视频请
求的顺序维持原来的顺序．对于缓存命中，我们做了一个假设，如果一个缓存是该用户未来
观看的视频，即使不是下一个要观看的视频，我们仍然视其为命中．

由于缺乏现实用户的请求模式，上面我们假设了一个同步的用户请求模式，为了简化实验步骤，
我们对视频缓存步骤和实际请求步骤也进行了同步，即所有用户统一进行缓存步骤，当所有缓存
结束之后，所有的用户才开始实际的请求步骤，当请求了一定比例的视频后，新的一轮缓存
才再度开始．我们选取了1000名用户和500个视频，将其置于假象的Ad Hoc网中，我们做了如下
假设：
１．如上所述，请求和缓存受到了同步
２．用户之间传输需要一个单位的代价，广播一次也是一个单位的代价
３．每个用户在请求期间会观看10部视频
４．只要缓存的视频用户将来实际管看过，就代表一次缓存命中，且缓存命中可以减少一次
请求消耗

基于上述假设，我们做了三组实验，分别对应着改变缓存大小，该表网络用户数量和对比不同
推荐算法在效果上的差别．实验中，我们提取每个用户前50%的观看记录作为历史记录，训练
过的模型用于模拟缓存，时间轴上的后50%历史记录作为命中的标准．实验是为了得到每种
情况下节省的通信带宽，其计算公式为$communication_save = (hit_num - distinct_videos)/10 \times user_num$.
其中的$hit_num$代表所有用户的缓存命中的所有视频，而$distinct_videos$是推荐的不同视频
的个数，由于推荐的视频通过广播传输，每个视频只需要消耗一个单位代价．$user_num$是所有
用户的数量，乘以10是因为我们假设每个用户将会观看10部视频．因此，communication_save
就代表所减少的通信占原本通信量的百分比．

改变缓存大小

<< cache_num.png >>

客户端的缓存越大，保存的视频命中的个数越多，在假定用户观看数量一定的情况下，相应的
节省的带宽也会越大．通常，缓存大小会远大于用户观看的视频数量，这个假设是基于移动
场景下流媒体传输所固有的高成本，节省的一次传输开销，不但能增强用户体验，还能减少
传输带来的信道占用．过多的信道争夺造成的不仅是传输的减慢，更能最终使得信道拥塞不
可用，带来的影响是群体性的．然而，缓存空间是相对廉价的资源，通常并不会成为应用的
瓶颈．移动设备的流媒体主流的以短视频为主，并且分辨率要求低，典型的一个视频大小在
在40M左右，缓存25个这样的视频占用1G左右的存储空间，这对于现代移动设备而言并不是一
个问题．

图XXX给出了传输节省伴随着缓存大小改变的结果图，其中包含100,500和1000个用户的网络
的结果．总体趋势是缓存越大节省的百分比越高．当用户数量较少且缓存数量小的时候，
缓存技术反而增加了网络的负担，这种负担是由于推荐的视频需要通过广播来传输，命中的
视频数量还不足以抵消广播传输带来的开销．

观察不同用户规模之间的结果比较，我们发现100名用户的结果最差.这符合直觉，因为越多的
用户就代表越多的命中，这样就有更多的用户得到广播带来的好处．但是，我们发现1000名用户
的结果是低于500用户的场景的，这是因为这500名用户的历史数据较多，命中率高，而1000名
用户使得通信基数变大，为了维持百分比就必须保证一定的命中率，而另外的500名用户没法
维持命中率．

从图中看出当缓存大于25能够达到30%的传输节省，这是基于每个用户观看10个视频的结果．
考虑500人的场景，那么这就是5000次的传输，那么实际上我们节省了1500次的视频传输．
如果实际上用户平均未观看这么多的视频，那么这个百分比会更高．

改变用户数量大小

<< user_num.png >>

用户数量决定了广播传输所带来的效果如何，当用户数量不多的时候，就要求推荐缓存的命中
率十分高，以至于能够抵消广播传输的代价.由于推荐一般属于个性化推荐，这意味不同的
用户推荐列表会十分不同，如此一来广播传输的视频数量就会很多．因此，一般希望用户个数
足够．

图XXX给出了缓存数为5,15和25的结果，当缓存数量为5的时候，通信节省百分比十分低但却
十分稳定，这代表命中个数正在与用户数量等比例增长.从缓存数量从5到25的提升过程可以
发现比例增长有所增快，因为在推荐列表顶部的视频一般极度个性化，所带来的增益并不明显．
当缓存增加，列表尾部被缓存之后，更大众的视频被命中，从而带来的增益有所增加．
当用户增加到一定数量之后，效果增加就不明显了，到300个用户时候，缓存的效果基本达到
饱和状态．这里更多的看到是缓存数量的重要性，越多的缓存代表越广的适用场景和更高的
传输节省，实际系统是希望能够处理各种用户数量场合的，因此设定更多的缓存很有必要．

命中率的重要性

<< method.png >>

命中率对于缓存而言是最关键的指标，不能保证命中率的缓存都是对带宽和存储空间的浪费．
我们比较不同方法的效果，具体而言是
１．基于聚类的推荐缓存
２．贝叶斯排序推荐的缓存策略
３．基于流行度的缓存
这三类方法分别对应着不同的命中率，其中１对比２将命中率从10%提升到15%.

首先观察基于流行度的缓存方法，这种策略将观看次数最多的那些视频缓存．虽然广播代价
低(只需要传输63个不同的视频),但是极低的命中率使其无法带来很大的收益．尽管用户观看
的视频呈现zipf分布，但是细化到一个有限的用户团体时候，用户之间的差异还是比较大，
基于流行度的方式很难精准预测用户的行为．

基于聚类的推荐缓存策略是结果最好方法，相较于贝叶斯排序推荐(BPR),它拥有更高的命中
率．但是除了关注命中率，推荐种类的多样性也值得关注.在缓存的场合，我们希望在保证
命中率的前提下，尽量降低视频的多样性．这也是聚类推荐部分达到的效果，从结果中来看，
BPR推荐的视频种类是494，而聚类推荐的视频种类是334，这为广播传输节约了开销．BPR过度
强调个性化，以至于将很多不能确定的视频引进推荐列表，这些视频的命中率却很低，而聚类
推荐能够很确定的将这些视频排除在外．这并不是说聚类推荐缺乏推荐结果的多样性，只是
在选择上更加严谨，不会轻易为了多样性引入不相关的视频．

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

本章小结

我们提出将推荐方法应用到移动流媒体的缓存领域，在用户多样性复杂的今天，传统基于流行
度的缓存策略已经不适用，推荐方法的引入极大的保证了缓存的命中率．我们利用无线信道
的广播传输来减少单播传输带来的开销．模拟实验表明，推荐算法的引入能够有效的提高效果．
另外，广播策略的有效性建立在一定的用户数量之上，缓存数量对结果影响十分明显．因此，
实际应用中应该重视缓存命中率和缓存数量两方面．







































